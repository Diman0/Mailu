name: CI
on:
  push:
    branches:
      - staging
      - testing
      - '1.9'
      - master
      # test branches, e.g. test-debian
      - test-*
      # todo: remove when this branch is ok
      - ci-multiarch

concurrency: ci-${{ github.ref }}

###############################################
# REQUIRED secrets
# DOCKER_UN: ${{ secrets.Docker_Login }}
#    Username of docker login for pushing the images to repo $DOCKER_ORG
# DOCKER_PW: ${{ secrets.Docker_Password }}
#    Password of docker login for pushing the images to repo $DOCKER_ORG
# Test images will be stored in GHCR.io. Only used for the branch TESTING (BORS try).
# DOCKER_ORG: ${{ secrets.DOCKER_ORG }}
# DOCKER_PREFIX: ${{ secrets.DOCKER_PREFIX }}
################################################
# Global environment variables, work value
env:
# ${{ secrets.DOCKER_ORG }}
  DOCKER_ORG: "leolivier" 
# ${{ secrets.DOCKER_PREFIX }}
  DOCKER_PREFIX: "mailu-"
  HCL_FILE: ./tests/build.hcl

jobs:
  setup:
    name: setup environment
    runs-on: ubuntu-latest
    steps:
      - name: setup script
        shell: bash
        # Extract branch name. For branch TESTING, we set the image tag to PR-xxxx else to BRANCH.
        # Then compute PINNED_MAILU_VERSION dependning on BRANCH type
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}";
          if [ "$BRANCH" == 'testing' ]; then
              COMMIT_MESSAGE="${{ github.event.head_commit.message }}";
              MAILU_VERSION="pr-${COMMIT_MESSAGE//[!0-9]/}"; 
          else MAILU_VERSION=$BRANCH;
          fi;
          case $BRANCH in
            'testing') PINNED_MAILU_VERSION="$MAILU_VERSION";;
            'staging') PINNED_MAILU_VERSION=staging;;
            'master' | 'ci-multiarch') PINNED_MAILU_VERSION="${GITHUB_SHA}";;
            *)
              version=$( git tag --sort=version:refname --list "$MAILU_VERSION.*" | tail -1  );
              root_version=${version%.*};
              patch_version=${version##*.};
              if [ "$patch_version" == "" ]; then 
                PINNED_MAILU_VERSION=$MAILU_VERSION.0; 
              else
                PINNED_MAILU_VERSION=$root_version.$(expr $patch_version + 1);
              fi;
              ;;
            esac;
            echo "MAILU_VERSION=$MAILU_VERSION" >> $GITHUB_ENV
            echo "PINNED_MAILU_VERSION=$PINNED_MAILU_VERSION" >> $GITHUB_ENV
            echo "BRANCH=$BRANCH" >> $GITHUB_ENV
      - name: setup DOCKER_ORG for non release
        if: ${{ github.event_name != 'release' }}
        shell: bash
        run: |
          echo "DOCKER_ORG=ghcr.io/${{ env.DOCKER_ORG }}" >> $GITHUB_ENV
      - name: Create version file
        shell: bash
        run: |
          VERSION_FILE="Source: https://github.com/$GITHUB_REPOSITORY Branch: $GITHUB_REF_NAME Tag: $PINNED_MAILU_VERSION Hash: $GITHUB_SHA"
          echo "VERSION_FILE=$VERSION_FILE"
          echo "VERSION_FILE=$VERSION_FILE" >> $GITHUB_ENV
    outputs:
      BRANCH: ${{ env.BRANCH }}
      MAILU_VERSION: ${{ env.MAILU_VERSION }}
      PINNED_MAILU_VERSION: ${{ env.PINNED_MAILU_VERSION }}
      DOCKER_ORG: ${{ env.DOCKER_ORG }}
      VERSION_FILE: ${{ env.VERSION_FILE }}

  targets:
    name: create targets
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.targets.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create matrix
        id: targets
        run: |
          echo ::set-output name=matrix::$(docker buildx bake -f ${{env.HCL_FILE}} --print | jq -cr '.group.default.targets')
      - name: Show matrix
        run: |
          echo ${{ steps.targets.outputs.matrix }}

  build:
    name: bake mailu
    runs-on: ubuntu-latest
    needs:
      - setup
      - targets
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.targets.outputs.matrix) }}
    steps:
      - name: recover setup environment
        shell: bash
        run: |
          echo "BRANCH=${{needs.setup.outputs.BRANCH}}" >> $GITHUB_ENV
          echo "MAILU_VERSION=${{needs.setup.outputs.MAILU_VERSION}}" >> $GITHUB_ENV
          echo "PINNED_MAILU_VERSION=${{needs.setup.outputs.PINNED_MAILU_VERSION}}" >> $GITHUB_ENV
          echo "DOCKER_ORG=${{needs.setup.outputs.DOCKER_ORG}}" >> $GITHUB_ENV
          echo "VERSION_FILE=${{needs.setup.outputs.VERSION_FILE}}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          # fetch-depth 0 is required to also retrieve all tags.
          fetch-depth: 0
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub on release
        uses: docker/login-action@v2
        if: ${{ github.event_name == 'release' }}
        with:
          username: ${{ secrets.Docker_Login }}
          password: ${{ secrets.Docker_Password }}
      - name: Login to GHCR if not release
        uses: docker/login-action@v2
        if: ${{ github.event_name != 'release' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # needed for gha cache?
      - uses: crazy-max/ghaction-github-runtime@v2
      # depending on login above, will push to GHCR for testing or to Docker hub for releasing
      # Build only amd64 version for now
      - name: Build and push
        uses: docker/bake-action@v2.1.0
        with:
          files: ${{env.HCL_FILE}}
          targets: ${{ matrix.target }}
          push: 'true'
#          load: 'true'
#          push: 'false' 
          set: |
            *.args.VERSION=${{ env.VERSION_FILE }}
            *.args.pinned_version=${{ env.VERSION_FILE }}
            *.cache-from=type=gha,scope=build-${{ matrix.target }}
            *.cache-to=type=gha,scope=build-${{ matrix.target }},mode=max
            *.platform=linux/amd64

  test-core:
    name: Perform core tests
    runs-on: ubuntu-latest
    needs:
      - setup
      - build
    steps:
      - name: recover setup environment
        shell: bash
        run: |
          echo "BRANCH=${{needs.setup.outputs.BRANCH}}" >> $GITHUB_ENV
          echo "MAILU_VERSION=${{needs.setup.outputs.MAILU_VERSION}}" >> $GITHUB_ENV
          echo "PINNED_MAILU_VERSION=${{needs.setup.outputs.PINNED_MAILU_VERSION}}" >> $GITHUB_ENV
          echo "DOCKER_ORG=${{needs.setup.outputs.DOCKER_ORG}}" >> $GITHUB_ENV
          echo "VERSION_FILE=${{needs.setup.outputs.VERSION_FILE}}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          # fetch-depth 0 is required to also retrieve all tags.
          fetch-depth: 0
      - name: Load docker images
        run: cd tests/compose/core && docker-compose up -d 
      - name: Install python packages
        run: python3 -m pip install -r tests/requirements.txt
      - name: Copy all certs
        run: sudo -- sh -c 'mkdir -p /mailu && cp -r tests/certs /mailu && chmod 600 /mailu/certs/*'
      - name: Test core suite
        run: python tests/compose/test.py core 2
        env:
          MAILU_VERSION: ${{ env.MAILU_VERSION }}
          PINNED_MAILU_VERSION: ${{ env.PINNED_MAILU_VERSION }}
          DOCKER_ORG: ${{ env.DOCKER_ORG }}

  test-fetchmail:
    name: Perform fetchmail tests
    runs-on: ubuntu-latest
    needs:
      - setup
      - build
    steps:
      - name: recover setup environment
        shell: bash
        run: |
          echo "BRANCH=${{needs.setup.outputs.BRANCH}}" >> $GITHUB_ENV
          echo "MAILU_VERSION=${{needs.setup.outputs.MAILU_VERSION}}" >> $GITHUB_ENV
          echo "PINNED_MAILU_VERSION=${{needs.setup.outputs.PINNED_MAILU_VERSION}}" >> $GITHUB_ENV
          echo "DOCKER_ORG=${{needs.setup.outputs.DOCKER_ORG}}" >> $GITHUB_ENV
          echo "VERSION_FILE=${{needs.setup.outputs.VERSION_FILE}}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          # fetch-depth 0 is required to also retrieve all tags.
          fetch-depth: 0
      - name: Load docker images
        run: cd tests/compose/fetchmail && docker-compose up -d 
      - name: Install python packages
        run: python3 -m pip install -r tests/requirements.txt
      - name: Copy all certs
        run: sudo -- sh -c 'mkdir -p /mailu && cp -r tests/certs /mailu && chmod 600 /mailu/certs/*'
      - name: Test fetch
        run: python tests/compose/test.py fetchmail 2
        env:
          MAILU_VERSION: ${{ env.MAILU_VERSION }}
          PINNED_MAILU_VERSION: ${{ env.PINNED_MAILU_VERSION }}
          DOCKER_ORG: ${{ env.DOCKER_ORG }}

  test-filters:
    name: Perform filter tests
    runs-on: ubuntu-latest
    needs:
      - setup
      - build
    steps:
      - name: recover setup environment
        shell: bash
        run: |
          echo "BRANCH=${{needs.setup.outputs.BRANCH}}" >> $GITHUB_ENV
          echo "MAILU_VERSION=${{needs.setup.outputs.MAILU_VERSION}}" >> $GITHUB_ENV
          echo "PINNED_MAILU_VERSION=${{needs.setup.outputs.PINNED_MAILU_VERSION}}" >> $GITHUB_ENV
          echo "DOCKER_ORG=${{needs.setup.outputs.DOCKER_ORG}}" >> $GITHUB_ENV
          echo "VERSION_FILE=${{needs.setup.outputs.VERSION_FILE}}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          # fetch-depth 0 is required to also retrieve all tags.
          fetch-depth: 0
      - name: Load docker images
        run: cd tests/compose/fetchmail && docker-compose up -d 
      - name: Install python packages
        run: python3 -m pip install -r tests/requirements.txt
      - name: Copy all certs
        run: sudo -- sh -c 'mkdir -p /mailu && cp -r tests/certs /mailu && chmod 600 /mailu/certs/*'
      - name: Test clamav
        run: python tests/compose/test.py filters 3
        env:
          MAILU_VERSION: ${{ env.MAILU_VERSION }}
          PINNED_MAILU_VERSION: ${{ env.PINNED_MAILU_VERSION }}
          DOCKER_ORG: ${{ env.DOCKER_ORG }}

  test-rainloop:
    name: Perform rainloop tests
    runs-on: ubuntu-latest
    needs:
      - setup
      - build
    steps:
      - name: recover setup environment
        shell: bash
        run: |
          echo "BRANCH=${{needs.setup.outputs.BRANCH}}" >> $GITHUB_ENV
          echo "MAILU_VERSION=${{needs.setup.outputs.MAILU_VERSION}}" >> $GITHUB_ENV
          echo "PINNED_MAILU_VERSION=${{needs.setup.outputs.PINNED_MAILU_VERSION}}" >> $GITHUB_ENV
          echo "DOCKER_ORG=${{needs.setup.outputs.DOCKER_ORG}}" >> $GITHUB_ENV
          echo "VERSION_FILE=${{needs.setup.outputs.VERSION_FILE}}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          # fetch-depth 0 is required to also retrieve all tags.
          fetch-depth: 0
      - name: Load docker images
        run: cd tests/compose/fetchmail && docker-compose up -d 
      - name: Install python packages
        run: python3 -m pip install -r tests/requirements.txt
      - name: Copy all certs
        run: sudo -- sh -c 'mkdir -p /mailu && cp -r tests/certs /mailu && chmod 600 /mailu/certs/*'
      - name: Test rainloop
        run: python tests/compose/test.py rainloop 2
        env:
          MAILU_VERSION: ${{ env.MAILU_VERSION }}
          PINNED_MAILU_VERSION: ${{ env.PINNED_MAILU_VERSION }}
          DOCKER_ORG: ${{ env.DOCKER_ORG }}

  test-roundcube:
    name: Perform roundcube tests
    runs-on: ubuntu-latest
    needs:
      - setup
      - build
    steps:
      - name: recover setup environment
        shell: bash
        run: |
          echo "BRANCH=${{needs.setup.outputs.BRANCH}}" >> $GITHUB_ENV
          echo "MAILU_VERSION=${{needs.setup.outputs.MAILU_VERSION}}" >> $GITHUB_ENV
          echo "PINNED_MAILU_VERSION=${{needs.setup.outputs.PINNED_MAILU_VERSION}}" >> $GITHUB_ENV
          echo "DOCKER_ORG=${{needs.setup.outputs.DOCKER_ORG}}" >> $GITHUB_ENV
          echo "VERSION_FILE=${{needs.setup.outputs.VERSION_FILE}}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          # fetch-depth 0 is required to also retrieve all tags.
          fetch-depth: 0
      - name: Load docker images
        run: cd tests/compose/fetchmail && docker-compose up -d 
      - name: Install python packages
        run: python3 -m pip install -r tests/requirements.txt
      - name: Copy all certs
        run: sudo -- sh -c 'mkdir -p /mailu && cp -r tests/certs /mailu && chmod 600 /mailu/certs/*'
      - name: Test roundcube
        run: python tests/compose/test.py roundcube 2
        env:
          MAILU_VERSION: ${{ env.MAILU_VERSION }}
          PINNED_MAILU_VERSION: ${{ env.PINNED_MAILU_VERSION }}
          DOCKER_ORG: ${{ env.DOCKER_ORG }}

  test-webdav:
    name: Perform webdav tests
    runs-on: ubuntu-latest
    needs:
      - setup
      - build
    steps:
      - name: recover setup environment
        shell: bash
        run: |
          echo "BRANCH=${{needs.setup.outputs.BRANCH}}" >> $GITHUB_ENV
          echo "MAILU_VERSION=${{needs.setup.outputs.MAILU_VERSION}}" >> $GITHUB_ENV
          echo "PINNED_MAILU_VERSION=${{needs.setup.outputs.PINNED_MAILU_VERSION}}" >> $GITHUB_ENV
          echo "DOCKER_ORG=${{needs.setup.outputs.DOCKER_ORG}}" >> $GITHUB_ENV
          echo "VERSION_FILE=${{needs.setup.outputs.VERSION_FILE}}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          # fetch-depth 0 is required to also retrieve all tags.
          fetch-depth: 0
      - name: Load docker images
        run: cd tests/compose/fetchmail && docker-compose up -d 
      - name: Install python packages
        run: python3 -m pip install -r tests/requirements.txt
      - name: Copy all certs
        run: sudo -- sh -c 'mkdir -p /mailu && cp -r tests/certs /mailu && chmod 600 /mailu/certs/*'
      - name: Test webdav
        run: python tests/compose/test.py webdav 2
        env:
          MAILU_VERSION: ${{ env.MAILU_VERSION }}
          PINNED_MAILU_VERSION: ${{ env.PINNED_MAILU_VERSION }}
          DOCKER_ORG: ${{ env.DOCKER_ORG }}

  deploy:
    name: Deploy images
    runs-on: ubuntu-latest
    needs:
      - build
      - test-core
      - test-fetchmail
      - test-filters
      - test-rainloop
      - test-roundcube
      - test-webdav
    steps:
      - name: recover setup environment
        shell: bash
        run: |
          echo "BRANCH=${{needs.setup.outputs.BRANCH}}" >> $GITHUB_ENV
          echo "MAILU_VERSION=${{needs.setup.outputs.MAILU_VERSION}}" >> $GITHUB_ENV
          echo "PINNED_MAILU_VERSION=${{needs.setup.outputs.PINNED_MAILU_VERSION}}" >> $GITHUB_ENV
          echo "DOCKER_ORG=${{needs.setup.outputs.DOCKER_ORG}}" >> $GITHUB_ENV
          echo "VERSION_FILE=${{needs.setup.outputs.VERSION_FILE}}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          # fetch-depth 0 is required to also retrieve all tags.
          fetch-depth: 0
      - name: Load docker images
        run: cd tests/compose/fetchmail && docker-compose up -d 
      - name: Install python packages
        run: python3 -m pip install -r tests/requirements.txt
      - name: Copy all certs
        run: sudo -- sh -c 'mkdir -p /mailu && cp -r tests/certs /mailu && chmod 600 /mailu/certs/*'

      - name: Load docker images
        if: ${{ env.BRANCH != 'staging' }}
        run: docker load -i /images/images.tar.gz
      - name: Deploy built docker images
        env:
          DOCKER_UN: ${{ secrets.Docker_Login }}
          DOCKER_PW: ${{ secrets.Docker_Password }}
          DOCKER_ORG: ${{ env.DOCKER_ORG }}
          MAILU_VERSION: ${{ env.MAILU_VERSION }}
          PINNED_MAILU_VERSION: ${{ env.PINNED_MAILU_VERSION }}
          BRANCH: ${{ env.BRANCH }}
        run: bash tests/deploy.sh

  tag-release:
    runs-on: ubuntu-latest
    needs:
      - setup
      - deploy
    steps:
      - name: recover setup environment
        shell: bash
        run: |
          echo "BRANCH=${{needs.setup.outputs.BRANCH}}" >> $GITHUB_ENV
          echo "MAILU_VERSION=${{needs.setup.outputs.MAILU_VERSION}}" >> $GITHUB_ENV
          echo "PINNED_MAILU_VERSION=${{needs.setup.outputs.PINNED_MAILU_VERSION}}" >> $GITHUB_ENV
          echo "DOCKER_ORG=${{needs.setup.outputs.DOCKER_ORG}}" >> $GITHUB_ENV
          echo "VERSION_FILE=${{needs.setup.outputs.VERSION_FILE}}" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          # fetch-depth 0 is required to also retrieve all tags.
          fetch-depth: 0
      - name: Create tag for branch x.y.
        if: ${{ env.BRANCH != 'testing' && env.BRANCH != 'staging' && env.BRANCH != 'master' && env.PINNED_MAILU_VERSION != '' }}
        shell: bash     
        run: |
          echo git tag ${{ env.PINNED_MAILU_VERSION }} $(/usr/bin/git rev-parse HEAD)
          git tag ${{ env.PINNED_MAILU_VERSION }} $(/usr/bin/git rev-parse HEAD)
          git push origin ${{ env.PINNED_MAILU_VERSION }}
      - name: Create release for tag x.y.z.
        if: ${{ env.BRANCH != 'testing' && env.BRANCH != 'staging' && env.BRANCH != 'master' && env.PINNED_MAILU_VERSION != '' }}
        uses: ncipollo/release-action@v1
        with:
          bodyFile: "RELEASE_TEMPLATE.md"
          tag: ${{ env.PINNED_MAILU_VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}

# remove temporary ghcr image
  purge-image:
    name: Delete image from ghcr.io
    # don't try to run for now, needs rework on triggerring
    if: 'false'
    runs-on: ubuntu-latest
    needs:
      - setup
      - targets
      - deploy
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.targets.outputs.matrix) }}
    steps:
      - name: recover setup environment
        shell: bash
        run: |
          echo "PINNED_MAILU_VERSION=${{needs.setup.outputs.PINNED_MAILU_VERSION}}" >> $GITHUB_ENV
          echo "DOCKER_ORG=${{needs.setup.outputs.DOCKER_ORG}}" >> $GITHUB_ENV
      - name: Delete image
        uses: bots-house/ghcr-delete-image-action@v1
        with:
          # NOTE: at now only orgs is supported
          owner: ${{env.DOCKER_ORG}}
          name: ${{ matrix.target }}
          # NOTE: using Personal Access Token
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{env.PINNED_MAILU_VERSION}}

 # This job is watched by bors. It only complets if building,testing and deploy worked.
  ci-success:
    name: CI-Done
    #Returns true when none of the **previous** steps have failed or have been canceled.
    if: ${{ success() }}
    needs:
      - deploy
    runs-on: ubuntu-latest
    steps:
      - name: CI/CD succeeded.
        run: exit 0
